//
//  MainViewController.swift
//  Gate Check
//
//  Created by Rawipon Srivibha on 17/12/18.
//  Copyright (c) 2018 Allianz Technology. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SVProgressHUD

protocol MainDisplayDelegate: class {
  func selectedCheckList(id: String, isIdChange: Bool)
}

protocol MainDisplayLogic: class {
  func displayCheckLists(_ viewModel: Main.FetchCheckLists.ViewModel)
}

class MainViewController: UITableViewController, MainDisplayLogic {
  var interactor: MainBusinessLogic?
  var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?

  var checkLists: [CheckListModel] = []
  var collapseDetailViewController = true
  weak var delegate: MainDisplayDelegate?
  
  // MARK: Object Lifecycle
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: View Lifecycle
  override func viewDidLoad() {
    super.viewDidLoad()
    
    setupUIComponents()
    setupSplitView()
    setupTableView()
  }
  
  override func viewDidAppear(_ animated: Bool) {
    super.viewDidAppear(animated)
    
    fetchCheckLists()
  }
  
  // MARK: - Request Functions
  func fetchCheckLists() {
    SVProgressHUD.show()
    interactor?.fetchCheckLists(Main.FetchCheckLists.Request())
  }
  
  @objc func refreshingStart() {
    fetchCheckLists()
  }
  
  func selectedCheckList(row: Int) {
    interactor?.selectedCheckList(Main.SelectedCheckList.Request(id: checkLists[row].identifier))
    router?.navigateToDetail()
  }
  
  // MARK: - Display Functions
  func displayCheckLists(_ viewModel: Main.FetchCheckLists.ViewModel) {
    SVProgressHUD.dismiss()
    refreshControl?.endRefreshing()
    
    checkLists = viewModel.checkLists
    tableView.reloadData()
  }
  
  // MARK: - Privates
  func setupUIComponents() {
    
  }
  
}

// MARK: - Setup, Routing

extension MainViewController {
  
  fileprivate func setup() {
    let viewController = self
    let interactor = MainInteractor()
    let presenter = MainPresenter()
    let router = MainRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
}
