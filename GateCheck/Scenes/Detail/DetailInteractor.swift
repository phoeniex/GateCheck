//
//  DetailInteractor.swift
//  Gate Check
//
//  Created by Rawipon Srivibha on 17/12/18.
//  Copyright (c) 2018 Allianz Technology. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import DKImagePickerController
import Result

protocol DetailBusinessLogic {
  func checkConfirmationNeed(_ request: Detail.CheckConfirmationNeed.Request)
  func fetchCheckListDetail(_ request: Detail.FetchCheckListDetail.Request)
  func updatedImageAsset(_ request: Detail.UpdatedImageAsset.Request)
}

protocol DetailDataStore: class {
  var checkListId: String? { get set }
  var isNeedFetching: Bool { get set }
}

class DetailInteractor: DetailBusinessLogic, DetailDataStore {
  var presenter: DetailPresentationLogic?
  
  var checkListId: String? {
    get { return currentId }
    set {
      previousId = currentId
      currentId = newValue
    }
  }
  
  var currentId: String?
  var previousId: String?
  var isNeedFetching = false
  var isDirty = false
  
  lazy var apiWorker = GateCheckApiWorker()
  var checkListRows: [CheckListDetail]?
  var imageAssets: [Int: [DKAsset]] = [:]
  
  // MARK: - Business Functions
  func checkConfirmationNeed(_ request: Detail.CheckConfirmationNeed.Request) {
    guard previousId != currentId, previousId != nil else {
      isNeedFetching = false
      let response = Detail.CheckConfirmationNeed.Response(isNeedConfirmation: false)
      presenter?.presentConfirmation(response)
      return
    }
    
    let response = Detail.CheckConfirmationNeed.Response(isNeedConfirmation: isDirty)
    presenter?.presentConfirmation(response)
  }
  
  func fetchCheckListDetail(_ request: Detail.FetchCheckListDetail.Request) {
    guard let id = checkListId else {
      presenter?.presentCheckListDetail(Detail.FetchCheckListDetail.Response(result: nil, id: nil))
      return
    }
    
    // Need Fetching and Data is Ready
    if isNeedFetching == false, let checkListRows = checkListRows {
      let result = Result<[CheckListDetail], APIError>.success(checkListRows)
      presenter?.presentCheckListDetail(Detail.FetchCheckListDetail.Response(result: result, id: id))
      return
    }
    
    apiWorker.getCheckListDetail(id: id) { [weak self] (result) in
      self?.checkListRows = result.value
      self?.isDirty = false
      self?.presenter?.presentCheckListDetail(Detail.FetchCheckListDetail.Response(result: result, id: id))
    }
  }
  
  func updatedImageAsset(_ request: Detail.UpdatedImageAsset.Request) {
    imageAssets[request.id] = request.assets
    
    fetchPreviewImages(request.assets) { [weak self] (images) in
      let response = Detail.UpdatedImageAsset.Response(id: request.id, images: images)
      self?.presenter?.presentImages(response)
    }
  }
  
  // MARK: - Privates
  
  func fetchPreviewImages(_ assets: [DKAsset], completion: @escaping ([UIImage]) -> Void) {
    let dispatchGroup = DispatchGroup()
    var images: [UIImage] = []
    
    assets.forEach { (asset) in
      dispatchGroup.enter()
      asset.fetchImage(with: CGSize(width: 258, height: 258)) { (image, _) in
        dispatchGroup.leave()
        
        guard let image = image else { return }
        images.append(image)
      }
    }
    
    dispatchGroup.notify(queue: .main) {
      completion(images)
    }

  }
  
}
