//
//  DetailViewController.swift
//  Gate Check
//
//  Created by Rawipon Srivibha on 17/12/18.
//  Copyright (c) 2018 Allianz Technology. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import IQKeyboardManagerSwift
import DKImagePickerController
import SVProgressHUD

protocol DetailDisplayLogic: class {
  func displayConfirmationDialog(_ viewModel: Detail.CheckConfirmationNeed.ViewModel)
  func displayCheckListDetail(_ viewModel: Detail.FetchCheckListDetail.ViewModel)
  func displayImages(_ viewModel: Detail.UpdatedImageAsset.ViewModel)
}

class DetailViewController: UIViewController, DetailDisplayLogic {
  var interactor: DetailBusinessLogic?
  var router: (NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?
  
  @IBOutlet weak var checkListStatusSegmentControl: UISegmentedControl!
  @IBOutlet weak var tableView: UITableView!
  @IBOutlet weak var contentView: UIView!
  @IBOutlet weak var emptyDataSetView: UIView!
  
  var detailCells: [DetailCellModel] = []

  // MARK: Object Lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: View Lifecycle
  override func viewDidLoad() {
    super.viewDidLoad()
    
    setupUIComponents()
    setupTableView()
  }
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    
    checkConfirmationNeeded()
  }
  
  @IBAction func textFieldCompleteEdited(sender: UITextField!) {
    if IQKeyboardManager.shared.canGoNext {
      IQKeyboardManager.shared.goNext()
    }
  }
  
  // MARK: - Request Functions
  func checkConfirmationNeeded() {
    interactor?.checkConfirmationNeed(Detail.CheckConfirmationNeed.Request())
  }
  
  func fetchCheckListDetail() {
    SVProgressHUD.show()
    interactor?.fetchCheckListDetail(Detail.FetchCheckListDetail.Request())
  }
  
  func updateImageFor(id: Int, _ asset: [DKAsset]) {
    
  }
  
  // MARK: - Display Functions
  func displayConfirmationDialog(_ viewModel: Detail.CheckConfirmationNeed.ViewModel) {
    guard let error = viewModel.error else {
      fetchCheckListDetail()
      return
    }
    
    let alert = UIAlertController(title: error.title, message: error.message, preferredStyle: .alert)
    alert.addAction(UIAlertAction(title: error.saveButton, style: .default) { [weak self] _ in
      //save and change id
    })
    alert.addAction(UIAlertAction(title: error.discardButton, style: .destructive) { [weak self] _ in
      self?.fetchCheckListDetail()
    })
    present(alert, animated: true, completion: nil)
  }
  
  func displayCheckListDetail(_ viewModel: Detail.FetchCheckListDetail.ViewModel) {
    SVProgressHUD.dismiss()
    title = viewModel.id
    
    guard let result = viewModel.result else {
      setEmptyDataSetHidden(false)
      return
    }
    
    switch result {
    case .success(let details): displayCheckListDetailSuccess(details)
    case .failure(let error): displayCheckListDetailFailure(error)
    }
  }
  
  func displayCheckListDetailSuccess(_ details: [DetailCellModel]) {
    setEmptyDataSetHidden(true)
    displayDetailRows(details)
  }
  
  func displayCheckListDetailFailure(_ error: Detail.FetchCheckListDetail.ViewModel.Error) {
    let alert = UIAlertController(errorAlert: error)
    present(alert, animated: true, completion: nil)
  }
  
  func displayImages(_ viewModel: Detail.UpdatedImageAsset.ViewModel) {
    
  }
  
  // MARK: - Privates
  func setupUIComponents() {
    setEmptyDataSetHidden(false)
  }
  
  func setEmptyDataSetHidden(_ isHidden: Bool) {
    emptyDataSetView.isHidden = isHidden
    contentView.isHidden = !isHidden
  }
  
  func displayDetailRows(_ details: [DetailCellModel]) {
    detailCells = details
    tableView.reloadData()
  }
  
}

// MARK: - Setup, Routing

extension DetailViewController {
  
  fileprivate func setup() {
    let viewController = self
    let interactor = DetailInteractor()
    let presenter = DetailPresenter()
    let router = DetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
}
